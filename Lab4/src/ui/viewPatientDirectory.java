/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package ui;
import java.util.ArrayList;
import java.util.regex.Matcher;
import java.util.regex.Pattern;
import javax.swing.JOptionPane;
import javax.swing.table.DefaultTableModel;
import model.Encounter;
import model.EncounterHistory;
import model.Patient;
import model.PatientDirectory;
import model.Person;
import model.VitalSign;
/**
 *
 * @author Neha
 */

public class viewPatientDirectory extends javax.swing.JPanel {

    /**
     * Creates new form viewPatientDirectory
     */
    PatientDirectory patientDirectory;
    EncounterHistory encounterHistory;
    EncounterHistory abnormalEncounters;
    PatientDirectory abnormalPatients;
    public viewPatientDirectory(PatientDirectory patientDirectory, EncounterHistory encounterHistory,PatientDirectory abnormalPatients, EncounterHistory abnormalEncounters) {
        initComponents();
        this.patientDirectory = patientDirectory;
        this.encounterHistory = encounterHistory;
        this.abnormalEncounters = abnormalEncounters;
        this.abnormalPatients = abnormalPatients;
        populateTable();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jScrollPane1 = new javax.swing.JScrollPane();
        tblPatientDirectory = new javax.swing.JTable();
        lblBloodPressure = new javax.swing.JLabel();
        lblRespiratoryRate = new javax.swing.JLabel();
        txtBloodPressure = new javax.swing.JTextField();
        txtRespiratoryRate = new javax.swing.JTextField();
        btnSaveDetails = new javax.swing.JButton();
        btnAddVitals = new javax.swing.JButton();
        btnViewHistory = new javax.swing.JButton();
        jScrollPane2 = new javax.swing.JScrollPane();
        tblPatientHistory = new javax.swing.JTable();
        jPatientDatabase = new javax.swing.JLabel();
        jButton1 = new javax.swing.JButton();

        setBackground(new java.awt.Color(255, 255, 255));
        setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        tblPatientDirectory.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null}
            },
            new String [] {
                "Patient ID", "First Name", "Last Name", "Age", "City", "Community", "House Number"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false, false, false, false, false, false, false
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jScrollPane1.setViewportView(tblPatientDirectory);

        add(jScrollPane1, new org.netbeans.lib.awtextra.AbsoluteConstraints(46, 162, 626, 145));

        lblBloodPressure.setFont(new java.awt.Font("Arial", 0, 14)); // NOI18N
        lblBloodPressure.setText("Blood Pressure");
        add(lblBloodPressure, new org.netbeans.lib.awtextra.AbsoluteConstraints(60, 455, 197, 25));

        lblRespiratoryRate.setFont(new java.awt.Font("Arial", 0, 14)); // NOI18N
        lblRespiratoryRate.setText("Respiratory Rate");
        add(lblRespiratoryRate, new org.netbeans.lib.awtextra.AbsoluteConstraints(47, 530, -1, 25));

        txtBloodPressure.setFont(new java.awt.Font("Didot", 3, 14)); // NOI18N
        txtBloodPressure.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                txtBloodPressureActionPerformed(evt);
            }
        });
        txtBloodPressure.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyReleased(java.awt.event.KeyEvent evt) {
                txtBloodPressureKeyReleased(evt);
            }
        });
        add(txtBloodPressure, new org.netbeans.lib.awtextra.AbsoluteConstraints(177, 455, 80, -1));

        txtRespiratoryRate.setFont(new java.awt.Font("Arial", 0, 14)); // NOI18N
        txtRespiratoryRate.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyReleased(java.awt.event.KeyEvent evt) {
                txtRespiratoryRateKeyReleased(evt);
            }
        });
        add(txtRespiratoryRate, new org.netbeans.lib.awtextra.AbsoluteConstraints(177, 530, 80, -1));

        btnSaveDetails.setBackground(new java.awt.Color(255, 255, 255));
        btnSaveDetails.setFont(new java.awt.Font("Didot", 0, 14)); // NOI18N
        btnSaveDetails.setText("Save");
        btnSaveDetails.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnSaveDetailsActionPerformed(evt);
            }
        });
        add(btnSaveDetails, new org.netbeans.lib.awtextra.AbsoluteConstraints(47, 605, 194, -1));

        btnAddVitals.setBackground(new java.awt.Color(255, 255, 255));
        btnAddVitals.setFont(new java.awt.Font("Arial", 0, 14)); // NOI18N
        btnAddVitals.setText("Add Vitals");
        btnAddVitals.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnAddVitalsActionPerformed(evt);
            }
        });
        add(btnAddVitals, new org.netbeans.lib.awtextra.AbsoluteConstraints(503, 332, 169, -1));

        btnViewHistory.setBackground(new java.awt.Color(255, 255, 255));
        btnViewHistory.setFont(new java.awt.Font("Arial", 0, 14)); // NOI18N
        btnViewHistory.setText("View History");
        btnViewHistory.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnViewHistoryActionPerformed(evt);
            }
        });
        add(btnViewHistory, new org.netbeans.lib.awtextra.AbsoluteConstraints(314, 332, 169, -1));

        tblPatientHistory.setForeground(new java.awt.Color(51, 51, 0));
        tblPatientHistory.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null}
            },
            new String [] {
                "Encounter No", "Blood Pressure", "Respiratory Rate"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false, false, false
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jScrollPane2.setViewportView(tblPatientHistory);
        if (tblPatientHistory.getColumnModel().getColumnCount() > 0) {
            tblPatientHistory.getColumnModel().getColumn(0).setResizable(false);
            tblPatientHistory.getColumnModel().getColumn(0).setHeaderValue("Encounter No");
        }

        add(jScrollPane2, new org.netbeans.lib.awtextra.AbsoluteConstraints(450, 460, 450, 150));

        jPatientDatabase.setFont(new java.awt.Font("Arial", 1, 18)); // NOI18N
        jPatientDatabase.setText("Patient Details");
        add(jPatientDatabase, new org.netbeans.lib.awtextra.AbsoluteConstraints(250, 93, 478, 36));

        jButton1.setBackground(new java.awt.Color(255, 255, 255));
        jButton1.setFont(new java.awt.Font("Arial", 0, 14)); // NOI18N
        jButton1.setText("Cancel Appointment");
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });
        add(jButton1, new org.netbeans.lib.awtextra.AbsoluteConstraints(125, 332, -1, -1));
    }// </editor-fold>//GEN-END:initComponents

    private void btnAddVitalsActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnAddVitalsActionPerformed
        // TODO add your handling code here:
        int selectedRowIndex = tblPatientDirectory.getSelectedRow();
        DefaultTableModel model = (DefaultTableModel) tblPatientDirectory.getModel();
        System.out.println(model.getValueAt(selectedRowIndex, 0));
        Patient patient = (Patient) model.getValueAt(selectedRowIndex , 0);
        
        lblTxtPatID.setText(Integer.toString(patient.getPatientid()));
    }//GEN-LAST:event_btnAddVitalsActionPerformed

    private void btnSaveDetailsActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnSaveDetailsActionPerformed
        // TODO add your handling code here:
         if(txtRespiratoryRate.getText().isBlank()|| txtRespiratoryRate.getText().isEmpty() 
                || txtBloodPressure.getText().isBlank() || txtBloodPressure.getText().isEmpty()){
              JOptionPane.showMessageDialog(this, "Vital Signs Cannot be Blank");
        
        
        }
        else{
        boolean patientYN;
        boolean isNormal;
        int encNo = 0;
        int selectedRowIndex = tblPatientDirectory.getSelectedRow();
        DefaultTableModel model = (DefaultTableModel) tblPatientDirectory.getModel();
        System.out.println(model.getValueAt(selectedRowIndex, 0));
        Patient patient = (Patient) model.getValueAt(selectedRowIndex , 0);
        patientYN = isPatientPresent(patient.getPatientid());
        System.out.println(patientYN);
        VitalSign vitalSign = new VitalSign();
        Encounter encounter = new Encounter();
        vitalSign.setRespiratoryrate(Double.parseDouble(txtRespiratoryRate.getText()));
        vitalSign.setBloodpressure(Double.parseDouble(txtBloodPressure.getText()));
        
        
        if(patientYN){
        encNo =  getEncNo(patient.getPatientid());
            encounter.setEncounterno(encNo+1);
        }else{
            encounter.setEncounterno(1);
        }
        
        encounter.setEncpatientid(patient.getPatientid());
        encounter.addVitalSign(vitalSign);
        encounterHistory.addEncounterInList(encounter);
        
        isNormal = isNormal(patient.getPatientage(), vitalSign.getBloodpressure(),vitalSign.getRespiratoryrate());
        
        if (!isNormal){
            abnormalPatients.addNewPatient(patient);
            abnormalEncounters.addEncounterInList(encounter);
        
        }
        System.out.println(encounterHistory.getEncounterHistoryList().get(0));
       }
    }//GEN-LAST:event_btnSaveDetailsActionPerformed

    private void btnViewHistoryActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnViewHistoryActionPerformed
        // TODO add your handling code here:
        
       
        int selectedRowIndex = tblPatientDirectory.getSelectedRow();
        DefaultTableModel model = (DefaultTableModel) tblPatientDirectory.getModel();
        System.out.println(model.getValueAt(selectedRowIndex, 0));
        Patient patient = (Patient) model.getValueAt(selectedRowIndex , 0);
//        lblEncHisPatId.setText(Integer.toString(patient.getPatientid()));
        DefaultTableModel tblPatientHistoryModel = (DefaultTableModel) tblPatientHistory.getModel();
        tblPatientHistoryModel.setRowCount(0);
        //get filtered data
        ArrayList<Encounter> list = getFilteredData(patient.getPatientid());
        
        //eoc
        //for(Encounter encounter : encounterHistory.getEncounterHistoryList()){
        for(Encounter encounter : list){    
            Object[] row = new Object[3];
            row[0] = encounter.getEncounterno();
            VitalSign vitalSign = encounter.getVitalSignList().get(0);
            row[1] = vitalSign.getBloodpressure();
            row[2] = vitalSign.getRespiratoryrate();
            tblPatientHistoryModel.addRow(row);
        }
        
        
    }//GEN-LAST:event_btnViewHistoryActionPerformed

    private void txtBloodPressureKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_txtBloodPressureKeyReleased
        // TODO add your handling code here:
         String PATTERN = "^[0-9]{2,3}";
        Pattern pat = Pattern.compile(PATTERN);
        Matcher match = pat.matcher(txtBloodPressure.getText());
        if(!match.matches()){
            lblBloodError.setText("Blood Pressure Should be 2 to 3 digits");
        }else{
            lblBloodError.setText("");
        }
    }//GEN-LAST:event_txtBloodPressureKeyReleased

    private void txtRespiratoryRateKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_txtRespiratoryRateKeyReleased
        // TODO add your handling code here:
         String PATTERN = "^[0-9]{2}";
        Pattern pat = Pattern.compile(PATTERN);
        Matcher match = pat.matcher(txtRespiratoryRate.getText());
        if(!match.matches()){
            lblRespiratoryRateError.setText("Respiratory Rate Should be 2 digits");
        }else{
            lblRespiratoryRateError.setText("");
        }
    }//GEN-LAST:event_txtRespiratoryRateKeyReleased

    private void txtBloodPressureActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_txtBloodPressureActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_txtBloodPressureActionPerformed

    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed
        // TODO add your handling code here:
        int selectedRowIndex = tblPatientDirectory.getSelectedRow();
        DefaultTableModel model = (DefaultTableModel) tblPatientDirectory.getModel();
        System.out.println(model.getValueAt(selectedRowIndex, 0));
        Patient patient = (Patient) model.getValueAt(selectedRowIndex , 0);
        patientDirectory.getPatientList().remove(selectedRowIndex);
        populateTable();
        JOptionPane.showMessageDialog(this, "Appointment Cancelled !");
    }//GEN-LAST:event_jButton1ActionPerformed


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnAddVitals;
    private javax.swing.JButton btnSaveDetails;
    private javax.swing.JButton btnViewHistory;
    private javax.swing.JButton jButton1;
    private javax.swing.JLabel jPatientDatabase;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JLabel lblBloodPressure;
    private javax.swing.JLabel lblRespiratoryRate;
    private javax.swing.JTable tblPatientDirectory;
    private javax.swing.JTable tblPatientHistory;
    private javax.swing.JTextField txtBloodPressure;
    private javax.swing.JTextField txtRespiratoryRate;
    // End of variables declaration//GEN-END:variables

    private void populateTable() {
        DefaultTableModel model = (DefaultTableModel) tblPatientDirectory.getModel();
        model.setRowCount(0);
        for (Patient patient: patientDirectory.getPatientList()){
        Object[] row = new Object[7];
        row[0] = patient;
        row[1] = patient.getPatientfirstname();
        row[2] = patient.getPatientlastname();
        row[3] = patient.getPatientage();
        row[4] = patient.getPatientcity();
        row[5] = patient.getPatientcommunity();
        row[6] = patient.getPatienthouse();
        model.addRow(row);
    }
}

    private boolean isPatientPresent(int patientId) {
        boolean present = false;
        for(Encounter encounter : encounterHistory.getEncounterHistoryList()){
        if(encounter.getEncpatientid()== patientId){
            present = true;
        }
        else{
            present = false;
        }
        }
       return present;
    }

    private int getEncNo(int patientId) {
        var result = new ArrayList<Encounter>();
        for(Encounter enc : encounterHistory.getEncounterHistoryList()){
        if(enc.getEncpatientid() == patientId){
        result.add(enc);
            }
        }
        
        Encounter enc = result.get(result.size()-1);
        return enc.getEncounterno();
            
    }

    private ArrayList<Encounter> getFilteredData(int patientId) {
        var result = new ArrayList<Encounter>();
        for(Encounter enc : encounterHistory.getEncounterHistoryList()){
        if(enc.getEncpatientid()== patientId){
        result.add(enc);
            }
        }
        return result;
        
    }

    private boolean isNormal(int patAge, double bloodpressure, double respiratoryrate) {
        boolean isNorm = false;
        if(patAge <= 40){
            if((bloodpressure<= 130 && bloodpressure>=90) && (respiratoryrate <= 100 && respiratoryrate>=90)){
            isNorm = true;
            }
            else{
            isNorm = false;
            }
            
        }
        else if (patAge >= 41 && patAge <= 100){
            if((bloodpressure<= 140 && bloodpressure>=100) && (respiratoryrate <= 80 && respiratoryrate>=70)){
            isNorm=  true;
            }
            else{
            isNorm = false;
            }
        }
        return isNorm;
        
    }
}
